(define (make-mobile left right)
    (list left right))
(define (make-branch length structure)
    (list length structure))
    
(define (left-branch mobile)
    (car mobile))
(define (right-branch mobile)
    (car (cdr mobile)))
    
(define (branch-length branch)
    (car branch))
(define (branch-structure branch)
    (car (cdr branch)))

(define (total-weight mobile)
    (cond ((null? mobile) mobile)
          ((not (pair? mobile)) mobile)
          (else (+ (total-weight (branch-structure (left-branch mobile)))
                (total-weight (branch-structure (right-branch mobile)))))))
(define l (make-branch 5 5))
(define r (make-branch 5 5))
(define m (make-mobile l r))
(define r2 (make-branch 5 m))
(total-weight (make-mobile l r2))

(define (is-balanced mobile)
    (cond ((null? mobile) #t)
          ((not (pair? mobile)) #t)
          (else (and (= (* (branch-length (left-branch mobile))(total-weight (branch-structure (left-branch mobile))))
                        (* (branch-length (right-branch mobile))(total-weight (branch-structure (right-branch mobile)))))
                    (is-balanced (branch-structure (left-branch mobile)))
                    (is-balanced (branch-structure (right-branch mobile)))))))
(is-balanced (make-mobile l r))